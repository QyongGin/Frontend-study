// 기본 문법 요약

// ! 코드 구조

/* 
여러 개의 구문은 세미콜론을 기준으로 구분한다.
세미콜론이 없어도 되는 자리에 붙여도 해당 세미콜론은 무시된다.
*/
alert('Hello'); alert('Hi');

// ! 엄격 모드

/*
모던 자바스크립트에서 지원하는 모든 기능을 활성화하려면 스크립트 맨 위 'use strict' 를 작성해야 한다.
없어도 코드는 정상적으로 작동하지만 모던한 방식이 아닌 하위 호환성을 지키며 옛날 방식으로 동작한다.
*/

// ! 변수

/*
let
const - 한 번 할당하면 더는 바꾸지 못하는 상수

규칙
숫자와 문자를 사용하되, 첫 글자는 숫자가 되지 못한다.
특수문자는 $와 _만 사용 가능.
동적 타이핑을 허용하기 때문에 자료형을 바꿔가며 값을 할당 가능하다.

여덟 가지 기본 자료형
숫자형 - 정수와 부동 소수점 저장
BigInt - 아주 큰 숫자를 저장
문자형 - 문자열을 저장
boolean형 - 논리값 true/flase를 저장
null - 비어있음, 존재하지 않음을 나타내는 null만을 위한 독립 자료형
undefined - 값이 할당되지 않은 상태를 나타내는 undefined만을 위한 독립 자료형
심볼형 - 복잡한 자료구조를 저장하는데 쓰이는 객체형과 고유한 식별자를 만들 때 사용

typeof - 값의 자료형을 반환한다. 
*/

// ! 상호작용

/*
prompt('질문','default');
- 프롬프트 창에 매개변수로 받은 질문을 사용자에게 보여준다. 확인을 누를 시 사용자가 입력한 값 반환
취소를 누를 시 null 반환

confirm(질문)
- 컨펌 대화상자에 매개변수로 받은 질문을 사용자에게 보여준다. 확인 true 그 외 false

alert(message)
- message가 담긴 얼럿 창을 보여준다.

세 함수는 모두 모달 창을 띄워준다. 모달 창이 닫히기 전까지 코드 실행이 중지된다. 
사용자는 모달 창 외에 페이지에 있는 그 무엇과도 상호작용 불가능
*/
let userName = prompt('이름을 입력해 주세요.', '차세범');
let isFoodWanted = confirm('음식 좀 드릴까요?');
alert('손님', userName);

// ! 연산자

/*

산술 연산자 
- 사칙 연산에 관련된 연산자 *, +, -, / 와 나머지 연산자 %, 거듭제곱 연산자 **

alert('1' + 2); '12' 문자열로 변환

할당 연산자
- a = b 형태의 할당 연산자. a *= 2 형태의 복합 할당 연산자

비트 연산자
- 인수를 32비트 정수로 변환하여 이진 연산 수행

조건부 연산자
- 연산자 중 유일하게 매개변수가 3개. cond ? resultA : resultB

논리 연산자
- &&, ||은 단란 평가를 수행, 평가가 멈춘 시점의 값을 반환. 
    NOT 연산자 !는 피연산자의 자료형을 불린형으로 바꾼 후 그 반대를 반환.
    
nullish 병합 연산자
- ??는 피연산자 중 실제 값이 정의된 피연산자를 찾는 데 쓰인다. 
    a가 null이나 undefined가 아니면 a ?? b 는 a.
    a가 null이나 undefined가 맞으면 a ?? b 는 b.

비교 연산자
- 동등 연산자 ==는 형이 다른 값끼리 비교할 때 피연산자의 자료형을 숫자형으로 바꾸고 비교.
    null과 undefined는 자기끼리 비교 시 참. 다른 자료형과 비교 시 거짓.
    기타 비교 연산자들 < > <= >= 역시 자료형을 숫자형으로 바꾸고 비교.
    일치 연산자 ===는 피연산자의 형을 반환하지 않는다. 형이 다르면 무조건 거짓.
    크고 작음을 비교하는 연산자의 피연사낮로 문자열이 들어오면 글자 단위로 크기 비교.
    다른 타입의 값이 들어오면 숫자형으로 변환후 비교.

*/

alert( 0 == flase); // true
alert( 0 == ''); // true

// ! 반복문

// 1
while (condition) {    

}

// 2
do {

} while (condition);

// 3
for(let i = 0; i < 10; i++) {

}

/*

- for(let...) 안쪽에 선언한 변수는 오직 반복문 내에서만 사용 가능하다. let을 생략하고 
    기존에 선언된 변수를 사용해도 된다.

- 지시자 break, continue는 반복문 전체나 실행 중인 반복을 빠져나가는 데 사용된다.
    레이블은 중첩 반복문을 빠져나갈 때 사용한다.
*/

// ! switch문

let age = prompt('나이를 알려주세요.', 18);

switch (age) {
    case 18: 
        alert('prompt는 항상 문자열을 반환합니다.');
        break;
    case '18':
        alert('통과.');
        break;

    default:
        alert('어느 case에도 해당하지 않습니다.');
}

// ! 함수

// 함수 선언문 - 주요 코드 흐름을 차지하는 방식
function sum(a, b) {
    return a + b;
}

// 함수 표현식 - 표현식 형태로 선언된 함수
let sum = function(a, b) {
    return a + b;
}

// 화살표 함수

let sum = (a, b) => a + b;

let sum = (a, b) => {
    return a + b;
}

let sayHi = () => alert('Hello');

let sum = n => n + 5;

/*

- 함수는 지역 변수를 가질 수 있다. 지역 변수는 함수의 본문에 선언된 변수로, 함수 내부에서만 접근 가능.
- 매개변수에 기본값을 설정할 수 있다. function sum(a = 1, b = 2) {}
- 함수는 항상 무언가를 반환한다. return문이 없다면 undefined를 반환한다.
*/